import javax.xml.transform.*;
import javax.xml.validation.*;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.dom.*;
import javax.xml.transform.sax.*;
import javax.xml.parsers.*;
import java.net.URL;
import org.xml.sax.*;
import org.w3c.dom.*;
import org.apache.xerces.jaxp.validation.*;
import java.io.*;
import javax.jnlp.*; 
public class SynVal
{

	private FileContents localXMLFC;
	private InputStream localXMLIS;
	private long xmlBytes;
	private String urlXSD;

        public SynVal(String localXML, String urlXSD)
        {
           File myfile = new File(localXML);
	   try {
	      this.xmlBytes=myfile.length();
	      this.localXMLIS=new FileInputStream(myfile);
	   }  catch (Exception e) {
                System.out.println(e.getMessage());
		VipChecker.appendMessage(e.getMessage());
           }
	   this.urlXSD=urlXSD;
 	   System.out.println("Object created");
	}


        public SynVal(FileContents localXMLFC, String urlXSD)
        {
	   try{
	    this.localXMLIS=localXMLFC.getInputStream();
	    this.urlXSD=urlXSD;
  	    this.xmlBytes=localXMLFC.getLength();
 	    System.out.println("Object created");
	   } catch (Exception e) {
                System.out.println(e.getMessage());
		VipChecker.appendMessage(e.getMessage());
           }
	}

	public String validate() {
           XMLSchemaFactory xmlSF = new XMLSchemaFactory();
	   String lngStr="";
 	   if (xmlBytes>(1024*1024)) {
	     lngStr=Math.round(xmlBytes / (1024*1024)) + "MB";
	   } else if (xmlBytes>1024) {
	     lngStr=Math.round(xmlBytes / 1024) + "KB";
	   }else {
 	     lngStr=xmlBytes + " bytes";
	   }
	   VipChecker.appendMessage("Your XML file is " + lngStr + ".");
	   VipChecker.appendMessage("On test computers, files of size 500MB took about one minute.");
           Schema xmlS=null;
           try {
               URL schemaURL = new URL(urlXSD);
               xmlS = xmlSF.newSchema(schemaURL);
           } catch (Exception e) {
                return(e.getMessage());
           }
           Validator myval= xmlS.newValidator();

           InputSource myis = new InputSource(localXMLIS);
           SAXSource myss = new SAXSource(myis);
           
           DOMSource myds=null;
           DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
           try {
           DocumentBuilder db = dbf.newDocumentBuilder();
           } catch (Exception e) {
                return(e.getMessage());
           }
           
           SAXResult res=null;
           try {
                res=new SAXResult();
                //System.out.println("start");
                myval.validate(myss,res);
                return("Syntactic Validation Passed!");
           } catch (Exception e) {
                return(e.getMessage() + "\n" + res.toString());
           }
        }

}
